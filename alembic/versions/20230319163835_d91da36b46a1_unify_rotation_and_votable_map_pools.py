"""unify rotation and votable map pools

Revision ID: d91da36b46a1
Revises: 96f7bb8f5652
Create Date: 2023-03-19 16:38:35.989353

"""
import logging

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "d91da36b46a1"
down_revision = "96f7bb8f5652"
branch_labels = None
depends_on = None


def upgrade():
    logging.warning("Upgrading removes all currently configured maps. Please re-add them!")

    op.execute("DELETE FROM skip_map_vote")
    op.execute("DELETE FROM map_vote")
    op.execute("DELETE FROM voteable_map")
    op.execute("DELETE FROM rotation_map")
    op.execute("DELETE FROM current_map")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "map",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("full_name", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), nullable=False),
        sa.Column("rotation_index", sa.Integer(), nullable=False),
        sa.Column("rotation_weight", sa.Integer(), nullable=False),
        sa.Column("is_votable", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_map")),
        sa.UniqueConstraint(
            "rotation_index", name=op.f("uq_map_rotation_index")
        ),
    )
    with op.batch_alter_table("map", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_map_full_name"), ["full_name"], unique=True
        )
        batch_op.create_index(
            batch_op.f("ix_map_short_name"), ["short_name"], unique=True
        )

    with op.batch_alter_table("map_vote", schema=None) as batch_op:
        batch_op.drop_constraint(
            "fk_map_vote_voteable_map_id_voteable_map", type_="foreignkey"
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_map_vote_voteable_map_id_map"),
            "map",
            ["voteable_map_id"],
            ["id"],
        )
        batch_op.drop_column("channel_id")

    with op.batch_alter_table("voteable_map", schema=None) as batch_op:
        batch_op.drop_index("ix_voteable_map_created_at")
        batch_op.drop_index("ix_voteable_map_full_name")
        batch_op.drop_index("ix_voteable_map_short_name")
    op.drop_table("voteable_map")

    with op.batch_alter_table("rotation_map", schema=None) as batch_op:
        batch_op.drop_index("ix_rotation_map_created_at")
        batch_op.drop_index("ix_rotation_map_full_name")
        batch_op.drop_index("ix_rotation_map_short_name")
    op.drop_table("rotation_map")

    with op.batch_alter_table("current_map", schema=None) as batch_op:
        batch_op.add_column(sa.Column("map_id", sa.String(), nullable=False))
        batch_op.create_index(
            batch_op.f("ix_current_map_map_id"), ["map_id"], unique=False
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_current_map_map_id_map"), "map", ["map_id"], ["id"]
        )
        batch_op.drop_column("full_name")
        batch_op.drop_column("map_rotation_index")
        batch_op.drop_column("short_name")
        batch_op.drop_column("created_at")

    with op.batch_alter_table("queue_waitlist", schema=None) as batch_op:
        batch_op.drop_column("channel_id")

    with op.batch_alter_table("skip_map_vote", schema=None) as batch_op:
        batch_op.drop_column("channel_id")
    # ### end Alembic commands ###


def downgrade():
    logging.warning("Downgrading removes all currently configured maps. Please re-add them!")

    op.execute("DELETE FROM skip_map_vote")
    op.execute("DELETE FROM map_vote")
    op.execute("DELETE FROM current_map")
    op.execute("DELETE FROM map")

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("skip_map_vote", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "channel_id", sa.BIGINT(), autoincrement=False, nullable=False
            )
        )

    with op.batch_alter_table("queue_waitlist", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "channel_id", sa.BIGINT(), autoincrement=False, nullable=False
            )
        )

    with op.batch_alter_table("current_map", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "created_at",
                postgresql.TIMESTAMP(),
                autoincrement=False,
                nullable=False,
            )
        )
        batch_op.add_column(
            sa.Column(
                "short_name", sa.VARCHAR(), autoincrement=False, nullable=True
            )
        )
        batch_op.add_column(
            sa.Column(
                "map_rotation_index",
                sa.INTEGER(),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                "full_name", sa.VARCHAR(), autoincrement=False, nullable=True
            )
        )
        batch_op.drop_constraint(
            batch_op.f("fk_current_map_map_id_map"), type_="foreignkey"
        )
        batch_op.drop_index(batch_op.f("ix_current_map_map_id"))
        batch_op.drop_column("map_id")

    op.create_table(
        "rotation_map",
        sa.Column(
            "full_name", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "short_name", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="pk_rotation_map"),
    )
    with op.batch_alter_table("rotation_map", schema=None) as batch_op:
        batch_op.create_index(
            "ix_rotation_map_short_name", ["short_name"], unique=False
        )
        batch_op.create_index(
            "ix_rotation_map_full_name", ["full_name"], unique=False
        )
        batch_op.create_index(
            "ix_rotation_map_created_at", ["created_at"], unique=False
        )

    op.create_table(
        "voteable_map",
        sa.Column(
            "full_name", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "short_name", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="pk_voteable_map"),
    )
    with op.batch_alter_table("voteable_map", schema=None) as batch_op:
        batch_op.create_index(
            "ix_voteable_map_short_name", ["short_name"], unique=False
        )
        batch_op.create_index(
            "ix_voteable_map_full_name", ["full_name"], unique=False
        )
        batch_op.create_index(
            "ix_voteable_map_created_at", ["created_at"], unique=False
        )

    with op.batch_alter_table("map_vote", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "channel_id", sa.BIGINT(), autoincrement=False, nullable=False
            )
        )
        batch_op.drop_constraint(
            batch_op.f("fk_map_vote_voteable_map_id_map"), type_="foreignkey"
        )
        batch_op.create_foreign_key(
            "fk_map_vote_voteable_map_id_voteable_map",
            "voteable_map",
            ["voteable_map_id"],
            ["id"],
        )

    with op.batch_alter_table("map", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_map_short_name"))
        batch_op.drop_index(batch_op.f("ix_map_full_name"))
    op.drop_table("map")
    # ### end Alembic commands ###
